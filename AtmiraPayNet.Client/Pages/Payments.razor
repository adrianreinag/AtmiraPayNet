@page "/payments"

@using AtmiraPayNet.Client.Services.Interfaces
@using AtmiraPayNet.Shared.DTO
@using AtmiraPayNet.Shared.Utils

@inject IPaymentService paymentService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider

<link rel="stylesheet" href="css/payments.css" />

<script>
    function downloadPdf(pdfBase64, fileName) {
        var link = document.createElement('a');
        link.href = 'data:application/pdf;base64,' + pdfBase64;
        link.download = fileName;

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

<div class="page">

    @if (simplePaymentList == null)
    {
        <div class="loading-container">
            <img src="assets/loading.svg" alt="loading" class="loading" />
        </div>
    }
    else
    {
        <div class="payments-container">
            <h3 class="title">Lista de pagos</h3>


            <table class="table">
                <thead>
                    <tr>
                        <th>Banco de origen</th>
                        <th>Banco de destino</th>
                        <th>Cantidad</th>
                        <th>Divisa</th>
                        <th>Estado</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var item in simplePaymentList)
                    {
                        <tr class="@(item.Status == Status.Generated ? "generated-row" : "")">
                            <td>@item.SourceBankName</td>
                            <td>@item.DestinationBankName</td>
                            <td>@item.Amount</td>
                            <td>@item.Currency.Symbol (@item.Currency.Name)</td>
                            @if (item.Status == Status.Draft)
                            {
                                <td>Borrador</td>
                            }
                            else
                            {
                                <td>Cerrado</td>
                            }

                            <td>
                                @if (item.Status == Status.Generated)
                                {
                                    <button class="btn btn-icon btn-primary" @onclick="() => RedirectToPayment(item.Id)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-icon btn-success" @onclick="() => RedirectToPayment(item.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                }
                            </td>
                            <td>
                                @if (item.Status == Status.Generated)
                                {
                                    <button class="btn btn-icon btn-secondary" @onclick="(() => DownloadPDF(item.Id))">
                                        <i class="bi bi-download"></i>
                                    </button>
                                }

                            </td>

                        </tr>
                    }
                    <tr>
                        <td colspan="7" align="center">
                            <a class="btn btn-create" href="payment">Create payment</a>
                        </td>
                    </tr>

                </tbody>
            </table>
        </div>
    }
</div>

@code {
    List<SimplePaymentDTO>? simplePaymentList = null;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (!user.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        simplePaymentList = await paymentService.GetPaymentList();
    }

    private async Task DownloadPDF(Guid id)
    {
        await paymentService.DownloadPDF(id);
    }

    private void RedirectToPayment(Guid itemId)
    {
        NavigationManager.NavigateTo($"payment/{itemId}");
    }
}
