@page "/payment";
@page "/payment/{id:guid}";

@using AtmiraPayNet.Client.Components
@using AtmiraPayNet.Shared.DTO
@using AtmiraPayNet.Client.Services.Interfaces
@using AtmiraPayNet.Shared.Utils

@inject IPaymentService paymentService;
@inject IRESTCountriesService countriesService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Payment</PageTitle>

<div class="page">

    <div class="payments-container">
        <h3 class="title">@title</h3>

        <EditForm Model="payment" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="row mb-5">
                <div class="col-4">
                    <div class="card px-3 pt-5 mx-2">
                        <div class="card-title">
                            <h4 class="subtitle">Origen</h4>
                        </div>
                        <div class="card-body">

                            <div class="mb-3">
                                <label class="form-label">IBAN</label>
                                <InputIBAN @bind-Value="payment.SourceIBAN" EditMode="@editMode" />
                                <ValidationMessage For="@(() => payment.SourceIBAN)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre del banco</label>
                                <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.SourceBankName"></InputText>
                                <ValidationMessage For="@(() => payment.SourceBankName)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Pais del banco</label>
                                <select class="form-control" @onchange="OnSourceCountrySelected" disabled="@(!editMode)">
                                    @if (createMode)
                                    {
                                        <option value="" disabled selected>Selecciona una opción</option>
                                    }
                                    else
                                    {
                                        <option value="@payment.SourceBankCountry" selected>@payment.SourceBankCountry</option>
                                    }

                                    @foreach (var country in countryList)
                                    {
                                        <option value="@country.Name.Common">@country.Name.Common</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => payment.SourceBankCountry)"></ValidationMessage>
                                @if (!string.IsNullOrEmpty(payment.ErrorSourceBankCountry))
                                {
                                    <span class="text-danger">@payment.ErrorSourceBankCountry</span>
                                }
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Divisa</label>
                                <InputText class="form-control" readonly @bind-Value="sourceCurrency"></InputText>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="col-4">
                    <div class="card px-3 pt-5 mx-2">
                        <div class="card-title">
                            <h4 class="subtitle">Destino</h4>
                        </div>
                        <div class="card-body">

                            <div class="mb-3">
                                <label class="form-label">IBAN</label>
                                <InputIBAN @bind-Value="payment.DestinationIBAN" EditMode="@editMode" />
                                <ValidationMessage For="@(() => payment.DestinationIBAN)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre del banco</label>
                                <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.DestinationBankName"></InputText>
                                <ValidationMessage For="@(() => payment.DestinationBankName)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Pais del banco</label>
                                <select class="form-control" @onchange="OnDestinationCountrySelected" disabled="@(!editMode)">
                                    @if (createMode)
                                    {
                                        <option value="" disabled selected>Selecciona una opción</option>
                                    }
                                    else
                                    {
                                        <option value="@payment.DestinationBankCountry" selected>@payment.DestinationBankCountry</option>
                                    }

                                    @foreach (var country in countryList)
                                    {
                                        <option value="@country.Name.Common">@country.Name.Common</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => payment.DestinationBankCountry)"></ValidationMessage>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Divisa</label>
                                <InputText class="form-control" readonly @bind-Value="destinationCurrency"></InputText>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="card px-3 pt-5 mx-2">
                        <div class="card-title">
                            <h4 class="subtitle">Intermediario</h4>
                        </div>
                        <div class="card-body">

                            <div class="mb-3">
                                <label class="form-label">IBAN</label>
                                <InputIBAN @bind-Value="payment.IntermediaryIBAN" EditMode="@editMode" />
                                <ValidationMessage For="@(() => payment.IntermediaryIBAN)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre del banco</label>
                                <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.IntermediaryBankName"></InputText>
                                <ValidationMessage For="@(() => payment.IntermediaryBankName)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Pais del banco</label>
                                <select class="form-control" @onchange="OnIntermediaryCountrySelected" disabled="@(!editMode)">
                                    @if (createMode)
                                    {
                                        <option value="" disabled selected>Selecciona una opción</option>
                                    }
                                    else
                                    {
                                        <option value="@payment.IntermediaryBankCountry" selected>@payment.IntermediaryBankCountry</option>
                                    }

                                    @foreach (var country in countryList)
                                    {
                                        <option value="@country.Name.Common">@country.Name.Common</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => payment.IntermediaryBankCountry)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Divisa</label>
                                <InputText class="form-control" readonly @bind-Value="intermediaryCurrency"></InputText>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card px-3 pt-5 mx-2 mb-5">
                <div class="card-title">
                    <h4 class="subtitle">Dirección de la oficina</h4>
                </div>

                <div class="card-body">

                    <div class="row">


                        <div class="mb-3 col-3">
                            <label class="form-label">Calle</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.Street"></InputText>
                            <ValidationMessage For="@(() => payment.Street)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-1">
                            <label class="form-label">Número</label>
                            <InputNumber class="form-control" readonly="@(!editMode)" @bind-Value="payment.Number"></InputNumber>
                            <ValidationMessage For="@(() => payment.Number)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-3">
                            <label class="form-label">Ciudad</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.Street"></InputText>
                            <ValidationMessage For="@(() => payment.Street)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-3">
                            <label class="form-label">Pais</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.Street"></InputText>
                            <ValidationMessage For="@(() => payment.Street)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-2">
                            <label class="form-label">Código postal</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.PostalCode"></InputText>
                            <ValidationMessage For="@(() => payment.PostalCode)"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>


            <div class="mx-2 d-flex justify-content-between align-items-end">
                <div class="mb-3 p-0">
                    <label class="form-label">Cantidad</label>
                    <InputNumber class="form-control" readonly="@(!editMode)" @bind-Value="payment.Amount" />
                    @* <InputMoney @bind-Value="payment.Amount" CurrencySymbol="sourceCurrency" /> *@
                    <ValidationMessage For="@(() => payment.Amount)"></ValidationMessage>
                </div>

                <div>
                    <a class="text-btn" href="payments">Volver al visor de pagos</a>
                    <button class="btn btn-create" type="submit">@textBtn</button>
                </div>
            </div>


        </EditForm>
    </div>
</div>

<style>
    .page {
        background-color: white;
    }

    .payments-container {
        padding: 80px 40px;
        z-index: -2;
    }

    .title {
        margin-bottom: 30px;
        text-align: center;
    }

    .subtitle {
        margin-bottom: 20px;
        text-align: center;
    }

    .btn {
        color: white;
        border: none;
        margin-bottom: 10px;
        border-radius: 50px;
        padding: 10px 40px;
        font-size: 18px;
    }

        .btn:hover {
            color: white;
        }

    .btn-create {
        background-color: rgb(222, 29, 112);
    }

        .btn-create:hover {
            background-color: rgb(242, 49, 132);
        }

    .text-btn {
        color: black;
        padding: 10px 20px;
        font-size: 18px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
    }

        .text-btn:hover {
            color: black;
        }
</style>

@code {
    [Parameter] public Guid id { get; set; } = Guid.Empty;

    string title = string.Empty;
    string textBtn = string.Empty;
    bool editMode;
    bool createMode;

    string sourceCurrency = string.Empty;
    string destinationCurrency = string.Empty;
    string intermediaryCurrency = string.Empty;

    PaymentDTO payment = new PaymentDTO();
    List<CountryDTO> countryList = new List<CountryDTO>();

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        // if (!user.Identity!.IsAuthenticated)
        // {
        //     NavigationManager.NavigateTo("/login");
        //     return;
        // }

        createMode = id == Guid.Empty;

        countryList = await countriesService.GetCountryList();

        if (!createMode)
        {
            payment = await paymentService.GetPaymentById(id);
            title = "Actualizar pago";
            textBtn = "Actualizar";
            if (payment.Status == Status.Draft)
            {
                editMode = true;
            }
            else
            {
                editMode = false;
            }

            sourceCurrency = GetCurrencyByCountryName(payment.SourceBankCountry!);
            destinationCurrency = GetCurrencyByCountryName(payment.DestinationBankCountry!);
        }
        else
        {
            title = "Crear pago";
            textBtn = "Crear";
            editMode = true;
        }
    }

    private async void OnSourceCountrySelected(ChangeEventArgs e)
    {
        payment.SourceBankCountry = e.Value!.ToString();
        sourceCurrency = GetCurrencyByCountryName(payment.SourceBankCountry!);
        await ValidateSourceIBANCountry();
    }

    private void OnDestinationCountrySelected(ChangeEventArgs e)
    {
        payment.DestinationBankCountry = e.Value!.ToString();
        destinationCurrency = GetCurrencyByCountryName(payment.DestinationBankCountry!);
    }

    private void OnIntermediaryCountrySelected(ChangeEventArgs e)
    {
        payment.IntermediaryBankCountry = e.Value!.ToString();
        intermediaryCurrency = GetCurrencyByCountryName(payment.IntermediaryBankCountry!);
    }

    private string GetCurrencyByCountryName(string countryName)
    {
        var country = countryList.FirstOrDefault(c => c.Name.Common == countryName);

        if (country == null)
        {
            return "No se ha encontrado la divisa";
        }

        var currency = country.Currencies.Values.FirstOrDefault();

        if (currency == null)
        {
            return "No se ha encontrado la divisa";
        }

        return currency.Name ?? "No se ha encontrado la divisa";
    }

    public async Task ValidateSourceIBANCountry()
    {
        var countryCode = await countriesService.GetCCA2ByCountryName(payment.SourceBankCountry ?? "");

        if (string.IsNullOrEmpty(countryCode))
        {
            payment.ErrorSourceBankCountry = "No se ha encontrado el código del país del banco seleccionado";
        }

        string ibanCountryCode = payment.SourceIBAN?.Substring(0, 2) ?? "";

        if (ibanCountryCode != countryCode)
        {
            payment.ErrorSourceBankCountry = "Las dos primeras letras del IBAN no coinciden con el país del banco seleccionado";
        }

        payment.ErrorSourceBankCountry = string.Empty;
    }

    private async Task OnValidSubmit()
    {
        if (id != Guid.Empty)
        {
            await paymentService.UpdatePayment(id, payment);
        }
        else
        {
            await paymentService.CreatePayment(payment);
        }
    }
}
