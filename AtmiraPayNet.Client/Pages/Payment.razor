@page "/payment";
@page "/payment/{id:guid}";

@using AtmiraPayNet.Client.Components
@using AtmiraPayNet.Shared.DTO
@using AtmiraPayNet.Client.Services.Interfaces
@using AtmiraPayNet.Shared.Utils
@using System.Text.RegularExpressions
@using System.Globalization
@using CurrieTechnologies.Razor.SweetAlert2

@inject IPaymentService paymentService;
@inject ICountriesService countriesService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService Swal;

<PageTitle>Payment</PageTitle>

<link rel="stylesheet" href="css/payment.css" />

<script>
    function downloadPdf(pdfBase64, fileName) {
        var link = document.createElement('a');
        link.href = 'data:application/pdf;base64,' + pdfBase64;
        link.download = fileName;

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

<div class="page">

    <div class="payments-container">
        <h3 class="title">@title</h3>

        <EditForm Model="payment">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="row mb-5">
                <div class="col-4">
                    <div class="card px-3 pt-5 mx-2">
                        <div class="card-title">
                            <h4 class="subtitle">Origen</h4>
                        </div>
                        <div class="card-body">

                            <div class="mb-3">
                                <label class="form-label">IBAN</label>
                                <InputIBAN @bind-Value="payment.SourceIBAN" EditMode="@editMode" OnChange="SetIntermediaryDisabled" />
                                <ValidationMessage For="@(() => payment.SourceIBAN)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre del banco</label>
                                <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.SourceBankName"></InputText>
                                <ValidationMessage For="@(() => payment.SourceBankName)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Pais del banco</label>
                                <select class="form-control" @onchange="@(e => CountrySelected(e, "source"))" disabled="@(!editMode)">
                                    @if (createMode)
                                    {
                                        @if (payment.SourceBankCountry == null)
                                        {
                                            <option value="" disabled selected>Selecciona una opción</option>
                                        }
                                        else
                                        {
                                            <option value="@payment.SourceBankCountry" disabled selected>@payment.SourceBankCountry</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="@payment.SourceBankCountry" selected>@payment.SourceBankCountry</option>
                                    }

                                    @foreach (var country in countryList)
                                    {
                                        <option value="@country.Name.Common">@country.Name.Common</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => payment.SourceBankCountry)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Divisa</label>
                                <InputText class="form-control" readonly @bind-Value="sourceCurrency"></InputText>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="col-4">
                    <div class="card px-3 pt-5 mx-2">
                        <div class="card-title">
                            <h4 class="subtitle">Destino</h4>
                        </div>
                        <div class="card-body">

                            <div class="mb-3">
                                <label class="form-label">IBAN</label>
                                <InputIBAN @bind-Value="payment.DestinationIBAN" EditMode="@editMode" OnChange="SetIntermediaryDisabled" />
                                <ValidationMessage For="@(() => payment.DestinationIBAN)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre del banco</label>
                                <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.DestinationBankName"></InputText>
                                <ValidationMessage For="@(() => payment.DestinationBankName)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Pais del banco</label>
                                <select class="form-control" @onchange="@(e => CountrySelected(e, "destination"))" disabled="@(!editMode)">
                                    @if (createMode)
                                    {
                                        <option value="" disabled selected>Selecciona una opción</option>
                                    }
                                    else
                                    {
                                        <option value="@payment.DestinationBankCountry" selected>@payment.DestinationBankCountry</option>
                                    }

                                    @foreach (var country in countryList)
                                    {
                                        <option value="@country.Name.Common">@country.Name.Common</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => payment.DestinationBankCountry)"></ValidationMessage>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Divisa</label>
                                <InputText class="form-control" readonly @bind-Value="destinationCurrency"></InputText>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="card px-3 pt-5 mx-2 disabled">
                        <div class="card-title">
                            <h4 class="subtitle">Intermediario</h4>
                        </div>
                        <div class="card-body">

                            <div class="mb-3">
                                <label class="form-label">IBAN</label>
                                <InputIBAN @bind-Value="payment.IntermediaryIBAN" EditMode="@(editMode && !intermediaryDisabled)" />
                                <ValidationMessage For="@(() => payment.IntermediaryIBAN)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre del banco</label>
                                <InputText class="form-control" readonly="@(!editMode || intermediaryDisabled)" @bind-Value="payment.IntermediaryBankName"></InputText>
                                <ValidationMessage For="@(() => payment.IntermediaryBankName)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Pais del banco</label>
                                <select class="form-control" @onchange="@(e => CountrySelected(e, "intermediary"))" disabled="@(!editMode || intermediaryDisabled)">
                                    @if (createMode)
                                    {
                                        <option value="" disabled selected>Selecciona una opción</option>
                                    }
                                    else
                                    {
                                        <option value="@payment.IntermediaryBankCountry" selected>@payment.IntermediaryBankCountry</option>
                                    }

                                    @foreach (var country in countryList)
                                    {
                                        <option value="@country.Name.Common">@country.Name.Common</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => payment.IntermediaryBankCountry)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Divisa</label>
                                <InputText class="form-control" readonly @bind-Value="intermediaryCurrency"></InputText>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card px-3 pt-5 mx-2 mb-5">
                <div class="card-title">
                    <h4 class="subtitle">Dirección de la oficina</h4>
                </div>

                <div class="card-body">

                    <div class="row">


                        <div class="mb-3 col-3">
                            <label class="form-label">Calle</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.Street"></InputText>
                            <ValidationMessage For="@(() => payment.Street)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-1">
                            <label class="form-label">Número</label>
                            <InputNumber class="form-control" readonly="@(!editMode)" @bind-Value="payment.Number"></InputNumber>
                            <ValidationMessage For="@(() => payment.Number)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-3">
                            <label class="form-label">Ciudad</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.City"></InputText>
                            <ValidationMessage For="@(() => payment.Street)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-3">
                            <label class="form-label">Pais</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.Country"></InputText>
                            <ValidationMessage For="@(() => payment.Street)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-2">
                            <label class="form-label">Código postal</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.PostalCode"></InputText>
                            <ValidationMessage For="@(() => payment.PostalCode)"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mx-2 d-flex justify-content-between align-items-end">
                <div class="mb-3 p-0">
                    <label class="form-label">Cantidad</label>
                    <InputNumber class="form-control" readonly="@(!editMode)" @bind-Value="payment.Amount"></InputNumber>
                    <ValidationMessage For="@(() => payment.Amount)"></ValidationMessage>
                </div>

                @if (createMode)
                {
                    <div>
                        <a class="text-btn" href="payments">Volver al visor de pagos</a>
                        <button class="btn btn-create" @onclick="(() => OnValidSubmit(Status.Generated))">Cerrar transacción</button>
                        <button class="btn btn-secondary ms-2" @onclick="(() => OnValidSubmit(Status.Draft))">Borrador</button>
                    </div>
                }
                else
                {
                    @if (editMode)
                    {
                        <div>
                            <a class="text-btn" href="payments">Volver al visor de pagos</a>
                            <button class="btn btn-create" @onclick="(() => OnValidSubmit(Status.Generated))">Cerrar transacción</button>
                            <button class="btn btn-secondary ms-2" @onclick="(() => OnValidSubmit(Status.Draft))">Borrador</button>
                        </div>
                    }
                    else
                    {
                        <div>
                            <a class="text-btn" href="payments">Volver al visor de pagos</a>
                            <button class="btn btn-secondary" @onclick="(() => DownloadPDF(id))">Descargar PDF</button>
                        </div>
                    }
                }
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid id { get; set; } = Guid.Empty;

    string title = string.Empty;
    bool editMode;
    bool createMode;

    string sourceCurrency = string.Empty;
    string destinationCurrency = string.Empty;
    string intermediaryCurrency = string.Empty;

    bool intermediaryDisabled = true;

    PaymentDTO payment = new PaymentDTO();
    List<CountryDTO> countryList = new List<CountryDTO>();

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (!user.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        createMode = id == Guid.Empty;

        countryList = await countriesService.GetCountryList();

        if (!createMode)
        {
            payment = await paymentService.GetPaymentById(id);
            if (payment.Status == Status.Draft)
            {
                title = "Actualizar pago";
                editMode = true;
            }
            else
            {
                title = "Visualizar pago";
                editMode = false;
            }

            sourceCurrency = GetCurrencyByCountryName(payment.SourceBankCountry!);
            destinationCurrency = GetCurrencyByCountryName(payment.DestinationBankCountry!);
            if (payment.IntermediaryBankCountry != null)
            {
                intermediaryCurrency = GetCurrencyByCountryName(payment.IntermediaryBankCountry!);
            }
        }
        else
        {
            title = "Crear pago";
            editMode = true;
        }
    }

    private void SetIntermediaryDisabled()
    {
        string sourceIban = payment.SourceIBAN ?? string.Empty;
        string destinationIban = payment.DestinationIBAN ?? string.Empty;

        if (sourceIban.Length >= 2 &&
            destinationIban.Length >= 2 &&
            sourceIban.Substring(0, 2) == destinationIban.Substring(0, 2))
        {
            intermediaryDisabled = true;
        }
        else
        {
            intermediaryDisabled = false;
        }
    }

    private void CountrySelected(ChangeEventArgs e, string account)
    {
        if (account == "source")
        {
            payment.SourceBankCountry = e.Value!.ToString();
            sourceCurrency = GetCurrencyByCountryName(payment.SourceBankCountry!);
            payment.SourceBankCCA2 = GetCCA2ByCountryName(payment.SourceBankCountry!);
        }
        else if (account == "destination")
        {
            payment.DestinationBankCountry = e.Value!.ToString();
            destinationCurrency = GetCurrencyByCountryName(payment.DestinationBankCountry!);
            payment.DestinationBankCCA2 = GetCCA2ByCountryName(payment.DestinationBankCountry!);
        }
        else if (account == "intermediary")
        {
            payment.IntermediaryBankCountry = e.Value!.ToString();
            intermediaryCurrency = GetCurrencyByCountryName(payment.IntermediaryBankCountry!);
            payment.IntermediaryBankCCA2 = GetCCA2ByCountryName(payment.IntermediaryBankCountry!);
        }
    }

    private string GetCurrencyByCountryName(string countryName)
    {
        var country = countryList.FirstOrDefault(c => c.Name.Common == countryName);

        if (country == null)
        {
            return "No se ha encontrado la divisa";
        }

        var currency = country.Currencies.Values.FirstOrDefault();

        if (currency == null)
        {
            return "No se ha encontrado la divisa";
        }

        return currency.Name ?? "No se ha encontrado la divisa";
    }

    private string GetCCA2ByCountryName(string countryName)
    {
        var country = countryList.FirstOrDefault(c => c.Name.Common == countryName);

        return country?.CCA2 ?? "No se ha encontrado";
    }

    private async Task OnValidSubmit(Status status)
    {
        payment.Status = status;

        string? errorMessage = payment.IsValid();

        if (errorMessage != null)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Algo salió mal",
                    Text = errorMessage,
                    Icon = SweetAlertIcon.Warning,
                    ShowConfirmButton = false
                });

            StateHasChanged();

            return;
        }

        bool createdOrUpdated = await (createMode ? paymentService.CreatePayment(payment) : paymentService.UpdatePayment(id, payment));

        if (createdOrUpdated)
        {
            if (status == Status.Draft)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Borrador guardado correctamente",
                        Icon = SweetAlertIcon.Success,
                        ShowConfirmButton = false
                    });
            }
            else
            {
                createMode = false;
                editMode = false;
                StateHasChanged();

                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Transacción cerrada correctamente",
                        Icon = SweetAlertIcon.Success,
                        ShowConfirmButton = false
                    });
            }
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Algo salió mal",
                    Text = "Por favor, revisa los datos e inténtalo de nuevo",
                    Icon = SweetAlertIcon.Warning,
                    ShowConfirmButton = false
                });
        }
    }


    private async Task DownloadPDF(Guid id)
    {
        await paymentService.DownloadPDF(id);
    }
}