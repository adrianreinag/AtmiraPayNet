@page "/payment";
@page "/payment/{id:guid}";

@using AtmiraPayNet.Client.Components
@using AtmiraPayNet.Shared.DTO
@using AtmiraPayNet.Client.Services.Interfaces
@using AtmiraPayNet.Shared.Utils
@using System.Text.RegularExpressions
@using System.Globalization

@inject IPaymentService paymentService;
@inject IRESTCountriesService countriesService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Payment</PageTitle>

<link rel="stylesheet" href="css/payment.css" />

<div class="page">

    <div class="payments-container">
        <h3 class="title">@title</h3>

        <EditForm Model="payment" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="row mb-5">
                <div class="col-4">
                    <div class="card px-3 pt-5 mx-2">
                        <div class="card-title">
                            <h4 class="subtitle">Origen</h4>
                        </div>
                        <div class="card-body">

                            <div class="mb-3">
                                <label class="form-label">IBAN</label>
                                <InputIBAN @bind-Value="payment.SourceIBAN" EditMode="@editMode" OnChange="ChangeSourceIBAN" />
                                <ValidationMessage For="@(() => payment.SourceIBAN)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre del banco</label>
                                <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.SourceBankName"></InputText>
                                <ValidationMessage For="@(() => payment.SourceBankName)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Pais del banco</label>
                                <select class="form-control" @onchange="OnSourceCountrySelected" disabled="@(!editMode)">
                                    @if (createMode)
                                    {
                                        @if (payment.SourceBankCountry == null)
                                        {
                                            <option value="" disabled selected>Selecciona una opción</option>
                                        }
                                        else
                                        {
                                            <option value="@payment.SourceBankCountry" disabled selected>@payment.SourceBankCountry</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="@payment.SourceBankCountry" selected>@payment.SourceBankCountry</option>
                                    }

                                    @foreach (var country in countryList)
                                    {
                                        <option value="@country.Name.Common">@country.Name.Common</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => payment.SourceBankCountry)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Divisa</label>
                                <InputText class="form-control" readonly @bind-Value="sourceCurrency"></InputText>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="col-4">
                    <div class="card px-3 pt-5 mx-2">
                        <div class="card-title">
                            <h4 class="subtitle">Destino</h4>
                        </div>
                        <div class="card-body">

                            <div class="mb-3">
                                <label class="form-label">IBAN</label>
                                <InputIBAN @bind-Value="payment.DestinationIBAN" EditMode="@editMode" OnChange="ChangeDestinationIBAN" />
                                <ValidationMessage For="@(() => payment.DestinationIBAN)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre del banco</label>
                                <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.DestinationBankName"></InputText>
                                <ValidationMessage For="@(() => payment.DestinationBankName)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Pais del banco</label>
                                <select class="form-control" @onchange="OnDestinationCountrySelected" disabled="@(!editMode)">
                                    @if (createMode)
                                    {
                                        <option value="" disabled selected>Selecciona una opción</option>
                                    }
                                    else
                                    {
                                        <option value="@payment.DestinationBankCountry" selected>@payment.DestinationBankCountry</option>
                                    }

                                    @foreach (var country in countryList)
                                    {
                                        <option value="@country.Name.Common">@country.Name.Common</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => payment.DestinationBankCountry)"></ValidationMessage>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Divisa</label>
                                <InputText class="form-control" readonly @bind-Value="destinationCurrency"></InputText>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="card px-3 pt-5 mx-2 disabled">
                        <div class="card-title">
                            <h4 class="subtitle">Intermediario</h4>
                        </div>
                        <div class="card-body">

                            <div class="mb-3">
                                <label class="form-label">IBAN</label>
                                <InputIBAN @bind-Value="payment.IntermediaryIBAN" EditMode="@(editMode && !intermediaryDisabled)" OnChange="IntermediaryIBANComplete" />
                                <ValidationMessage For="@(() => payment.IntermediaryIBAN)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nombre del banco</label>
                                <InputText class="form-control" readonly="@(!editMode || intermediaryDisabled)" @bind-Value="payment.IntermediaryBankName"></InputText>
                                <ValidationMessage For="@(() => payment.IntermediaryBankName)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Pais del banco</label>
                                <select class="form-control" @onchange="OnIntermediaryCountrySelected" disabled="@(!editMode || intermediaryDisabled)">
                                    @if (createMode)
                                    {
                                        <option value="" disabled selected>Selecciona una opción</option>
                                    }
                                    else
                                    {
                                        <option value="@payment.IntermediaryBankCountry" selected>@payment.IntermediaryBankCountry</option>
                                    }

                                    @foreach (var country in countryList)
                                    {
                                        <option value="@country.Name.Common">@country.Name.Common</option>
                                    }
                                </select>
                                <ValidationMessage For="@(() => payment.IntermediaryBankCountry)"></ValidationMessage>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Divisa</label>
                                <InputText class="form-control" readonly @bind-Value="intermediaryCurrency"></InputText>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card px-3 pt-5 mx-2 mb-5">
                <div class="card-title">
                    <h4 class="subtitle">Dirección de la oficina</h4>
                </div>

                <div class="card-body">

                    <div class="row">


                        <div class="mb-3 col-3">
                            <label class="form-label">Calle</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.Street"></InputText>
                            <ValidationMessage For="@(() => payment.Street)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-1">
                            <label class="form-label">Número</label>
                            <InputNumber class="form-control" readonly="@(!editMode)" @bind-Value="payment.Number"></InputNumber>
                            <ValidationMessage For="@(() => payment.Number)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-3">
                            <label class="form-label">Ciudad</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.City"></InputText>
                            <ValidationMessage For="@(() => payment.Street)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-3">
                            <label class="form-label">Pais</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.Country"></InputText>
                            <ValidationMessage For="@(() => payment.Street)"></ValidationMessage>
                        </div>

                        <div class="mb-3 col-2">
                            <label class="form-label">Código postal</label>
                            <InputText class="form-control" readonly="@(!editMode)" @bind-Value="payment.PostalCode"></InputText>
                            <ValidationMessage For="@(() => payment.PostalCode)"></ValidationMessage>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mx-2 d-flex justify-content-between align-items-end">
                <div class="mb-3 p-0">
                    <label class="form-label">Cantidad</label>
                    <InputNumber class="form-control" readonly="@(!editMode)" @bind-Value="payment.Amount"></InputNumber>
                    <ValidationMessage For="@(() => payment.Amount)"></ValidationMessage>
                </div>


                <div>
                    <a class="text-btn" href="payments">Volver al visor de pagos</a>
                    <button class="btn btn-create" type="submit">@textBtn</button>
                </div>
            </div>

        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid id { get; set; } = Guid.Empty;

    string title = string.Empty;
    string textBtn = string.Empty;
    bool editMode;
    bool createMode;

    string sourceCurrency = string.Empty;
    string destinationCurrency = string.Empty;
    string intermediaryCurrency = string.Empty;

    bool intermediaryDisabled = true;

    PaymentDTO payment = new PaymentDTO();
    List<CountryDTO> countryList = new List<CountryDTO>();

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (!user.Identity!.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        createMode = id == Guid.Empty;

        countryList = await countriesService.GetCountryList();

        if (!createMode)
        {
            payment = await paymentService.GetPaymentById(id);
            title = "Actualizar pago";
            textBtn = "Actualizar";
            if (payment.Status == Status.Draft)
            {
                editMode = true;
            }
            else
            {
                editMode = false;
            }

            sourceCurrency = GetCurrencyByCountryName(payment.SourceBankCountry!);
            destinationCurrency = GetCurrencyByCountryName(payment.DestinationBankCountry!);
        }
        else
        {
            title = "Crear pago";
            textBtn = "Crear";
            editMode = true;
        }
    }

    private void SetIntermediaryDisabled()
    {
        string sourceIban = payment.SourceIBAN ?? string.Empty;
        string destinationIban = payment.DestinationIBAN ?? string.Empty;

        if (sourceIban.Length >= 2 &&
            destinationIban.Length >= 2 &&
            sourceIban.Substring(0, 2) == destinationIban.Substring(0, 2))
        {
            intermediaryDisabled = true;
        }
        else
        {
            intermediaryDisabled = false;
        }
    }

    private async Task ChangeSourceIBAN(string iban)
    {
        iban = iban.Replace(" ", "");
        if (iban.Length == 24)
        {
            var bankData = await paymentService.GetBankByIBAN(iban);

            if (bankData == null)
            {
                return;
            }

            payment.SourceBankName = bankData.Name;
            payment.SourceBankCountry = bankData.CountryName;
            sourceCurrency = GetCurrencyByCountryName(payment.SourceBankCountry!);
        }

        SetIntermediaryDisabled();
    }

    private async Task ChangeDestinationIBAN(string iban)
    {
        iban = iban.Replace(" ", "");
        if (iban.Length == 24)
        {
            var bankData = await paymentService.GetBankByIBAN(iban);

            if (bankData == null)
            {
                return;
            }

            payment.DestinationBankName = bankData.Name;
            payment.DestinationBankCountry = bankData.CountryName;
            destinationCurrency = GetCurrencyByCountryName(payment.DestinationBankCountry!);
        }

        SetIntermediaryDisabled();
    }

    private async Task IntermediaryIBANComplete(string iban)
    {
        iban = iban.Replace(" ", "");
        if (iban.Length == 24)
        {
            var bankData = await paymentService.GetBankByIBAN(iban);

            if (bankData == null)
            {
                return;
            }

            payment.IntermediaryBankName = bankData.Name;
            payment.IntermediaryBankCountry = bankData.CountryName;
            intermediaryCurrency = GetCurrencyByCountryName(payment.IntermediaryBankCountry!);
        }
    }

    private void OnSourceCountrySelected(ChangeEventArgs e)
    {
        payment.SourceBankCountry = e.Value!.ToString();
        sourceCurrency = GetCurrencyByCountryName(payment.SourceBankCountry!);
    }

    private void OnDestinationCountrySelected(ChangeEventArgs e)
    {
        payment.DestinationBankCountry = e.Value!.ToString();
        destinationCurrency = GetCurrencyByCountryName(payment.DestinationBankCountry!);
    }

    private void OnIntermediaryCountrySelected(ChangeEventArgs e)
    {
        payment.IntermediaryBankCountry = e.Value!.ToString();
        intermediaryCurrency = GetCurrencyByCountryName(payment.IntermediaryBankCountry!);
    }

    private string GetCurrencyByCountryName(string countryName)
    {
        var country = countryList.FirstOrDefault(c => c.Name.Common == countryName);

        if (country == null)
        {
            return "No se ha encontrado la divisa";
        }

        var currency = country.Currencies.Values.FirstOrDefault();

        if (currency == null)
        {
            return "No se ha encontrado la divisa";
        }

        return currency.Name ?? "No se ha encontrado la divisa";
    }

    private async Task OnValidSubmit()
    {
        // if (id != Guid.Empty)
        // {
        //     await paymentService.UpdatePayment(id, payment);
        // }
        // else
        // {
        //     await paymentService.CreatePayment(payment);
        // }
    }
}
